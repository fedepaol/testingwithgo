Intro to code testing with Go

Federico Paolinelli & Susanna Martinelli
List
@coldsashimi / @fedepaol
fedepaol@gmail.com / susanna.martinelli@gmail.com

* Agenda

- Intro to testing
- Testing with go
- Advanced testing patterns with go

* The need for tests

* 

.image realmen.jpg 500 _

: L'utilizzo di unit test e` una pratica comune nell'industria e indice di qualita`

* We do change our code.
Reasons we change:
- New features
- Fixing a bug
- Refactor (better readability / easier to maintain)
- Optimization

: That's what they pay us for

* We need to preserve the behaviour

.image behaviour.png 

: Every time we change a program that is behaving in a correct way, we put it's correctness in discussion.
: This is important. When we change a part of our code, the rest is supposed to preserve its behaviour
: Testing helps us to understand if the behaviour is changed
: Ovviamente se il comportamento non e` preservato, si traduce in un bug dell'applicazione



* 

Changes in a system can be made in two primary ways. I like to call them Edit and Pray and Cover and Modify. 

Unfortunately, Edit and Pray is pretty much the industry standard


.caption Micheal Feathers - Working effectively with legacy code

: Covering means covering with tests

* The cost of fixing a bug

- during development : 100 $
- during a QA testing phase : 1500 $
- in production : _The_sky_is_the_limit_

"In August 2012 Knight Capital Group Inc., one of America’s largest trading firms, mistakenly sent out more than four million stock orders in less than an hour [...] The software bug caused over $440 million in losses, which is almost four times what the company made in 2011."

.caption from [[http://blog.celerity.com/the-true-cost-of-a-software-bug][The true cost of a software bug]]

: Fixing a production bug costs 100x more than fixing a bug at design time, and over 15x more than fixing a bug at implementation time.


* When we say testing we mean Unit Testing

* What Unit tests are

".. We asked him (Kent Beck) for his definition and he replied with something like "in the morning of my training course I cover 24 different definitions of unit test."
.caption Martin Fowler [[https://martinfowler.com/bliki/UnitTest.html][ibliki: UnitTest]]

* Common characteristics of tests

- Functions with known input & known output
- Low level, focus on a small part of the system
- Written by programmers
- Faster than normal tests

: known input e know output e` importante. Se il codice interagisce con elementi esterni di cui non controlliamo il comportamento dobbiamo
: trovare modi per controllarlo (o sostituirlo con degli alias)

* What to treat like a unit?

- A class?
- A function?

: We will see that go takes a slightly different approach

* Benefits of testing
- Quality
- Self documenting
- Result in a better design
- Reduce costs
- Automation

* Testing in Go

: or, what do you need to know in order to understand the next part

* User defined data structures

Go Structs

	type book struct {
		title string
		author string
	}

	var b book	// zero value
	var b1 book{title:"Golang"} // literal initializer

: no inheritance
: no generics
: enforce composition through embedding

* Methods

- Just a special kind of functions (they have a receiver)
- Explicitly associated to objects or pointers

	type Dog struct {
		Animal
	}

	func (d Dog) bark() {
		// bark
	}

	func (d *Dog) feed() {
		d.weight++
	}

: can assign methods to any type, even those you don't own

* Interfaces

- Abstract types defining a behaviour
- Satisfied implicitly 

	type Driveable interface {
		func Drive() int
	}

	func (c Car) Drive (km int) {/* */}
	func (b Bike) Drive (km int) {/* */}

	var c Car{wheels : 4}
	var d Driveable = c

_If_it_walks_like_a_duck_and_quacks_as_a_duck,_it's_a_duck_

: But the compiler tells you if you made a mistake
: You can create interfaces that are satisfied by structs you don't own.

* Interfaces (2)

- Can be composed

	type ReadWriter interface {
		Reader
		Writer
	}


- Can be checked

	c, ok := d.(Car) // true
	c, ok := d.(Bike)  // false

	switch d.(type) {
		case Car: //
	}

: you can retro assign an interface to any object
: Interfaces can be used as a placeholder to use different concrete types 

* Encapsulation

.image encapsulation.jpeg _ 400

* Encapsulation in Go:

- The visibility is related to the _package_
- Multiple files can belong to the same package
- The visibility is toggled by uppercasing / lowercasing 


Every file belongs to a package

	package mypackage

	var Exported int
	var notExported string


* The go test tool

* Test files

From the stdlib strings package:

	src/.../
		strings/
			builder.go 	
			builder_test.go
			compare.go
			compare_test.go
			example_test.go
			export_test.go
			reader.go
			reader_test.go
			replace.go
			replace_test.go
			search.go
			search_test.go
			strings.go
			strings_decl.go
			strings_test.go

: Files *_test are not part of the package. They are built by go test
: go test generates a temporary main and executes it

* Test functions

.code reverse/totest.go /START OMIT/,/END OMIT/
.code reverse/totest_test.go /START OMIT/,/END OMIT/

: The go test tool looks for function that look like Test*
: Very raw functionalities compared to other languages / testing frameworks (jUnit)

* Go test execution

A failing test:

	go test
	--- FAIL: TestReverse (0.00s)
	    totest_test.go:8: Reverse("gdgolleh") = hellogdg
	FAIL
	exit status 1
	FAIL    _/home/fedepaol/devel/talks/testingwithgo       0.001s

A passing test:

	go test
	PASS
	ok      _/home/fedepaol/devel/talks/testingwithgo       0.001s

: We don't want output when a test passes. We do want output with info when a test fails

* Other go test features

* Coverage

	go test -cover
		PASS
		coverage: 100.0% of statements
		ok  	_/home/fedepaol/devel/talks/testingwithgo	0.001s

`go`tool`cover`:

	Usage of 'go tool cover':
	Given a coverage profile produced by 'go test':
		go test -coverprofile=c.out

	Open a web browser displaying annotated source code:
		go tool cover -html=c.out

* Benchmark

.code reverse/totestbench_test.go /START OMIT/,/END OMIT/

* Benchmark
	go test -bench=.
		goos: darwin
		goarch: amd64
		pkg: github.com/fedepaol/testingwithgo/reverse
								#Max number          #ns for each
								of iteration         iteration
		BenchmarkReverse4-4      5000000               226 ns/op
		BenchmarkReverse8-4      3000000               421 ns/op
		BenchmarkReverse16-4     1000000              1118 ns/op
		BenchmarkReverse32-4     1000000              1845 ns/op
		BenchmarkReverse64-4      500000              2808 ns/op
		PASS
		ok      github.com/fedepaol/testingwithgo/reverse       8.598s

: Each benchmark is run for a minimum of 1 second by default
: The value of b.N is increased in the sequence 1, 2, 5, 10, 20, 50, …
: The final BenchmarkReverse64 only ran 500000 times becaus each run has the average of 0,000002 sec (~2808ns/op) .
: if your number of runs are statically weak increase the bench time with `-benchtime=20s`

* Pro tips

- test results are cached: for same binary and same flags
To disable caching:

	go clean -testcache

- Race detector
	go test -race mypackage

: Golang caches tests result in order to not repeat the test in case the code did not
: change. 
: The cache only applies to "go test package-list", not to "go test" without a package list. 

: When the -race command-line flag is set, the compiler instruments all memory accesses 
: with code that records when and how the memory was accessed, 
: while the runtime library watches for unsynchronized accesses to shared variables

* Testable Code

* What to test

Go naturally forces us to split our code in "libraries" and client code

- try to test only public functions
- test private functions worth being tested
- protip: use _package_xxx__test_
- test all the layers
- test positive and contrapositive results

* Package organization

- Use packages to isolate external dependencies
- Packages by functionality  
- Layered packages 
- Dependency Injection

.caption aws-sdk-go is a good example of package organization [[https://github.com/aws/aws-sdk-go/tree/master]]

: Ideally one package per dependency, it's easier to mock external dependencies
: Packages put a firewall between the components of your application
: Layering packages allow to test the whole 

* State
- Avoid global state
- Have global configuration
- Make parameters configurable

: Lo stato e` nemico della riproducibilita`
: No hardcoded hosts, ports, timeouts. Have them configurable (with a default)
: local variables / environment
: tests should be able to override them

*Functions*

- Have functions accept interfaces and return concrete types
- Prefer functions to methods

: The second one is counterintuitive if you come from oop. If the object does not get changed, is more clear what is teh input / output of the function
: Todo expand with an example?

* Accept interfaces and return concrete types

	// Don't
	func LineCounter(file os.File) int {
		...
	}

	// Do
	func LineCounter(r io.Reader) int {
		...
	}

: More generic. You can pass a stream from a socket, a file, whatever
: You can pass mocks: a fixed string

* Interfaces

- Interfaces are mocking points
- You can build interfaces against types you don't own
- Try to stick to stdlibs interfaces

: Should be used with care. 


* Mocking dependencies

* Interfaces:

Let's say we have a library like this:

	type CakeClient struct {
	}

	// Ingredients returns the list of ingredients for the given cake
	func (l CakeClient) Ingredients(cake string) ([]string, err) {
		...
	}

And we want to test a function like this:

	func OrderIngredients(cake string, client CakeClient) ([]string, error) {
		...
		ingredients, err := client.Ingredients(cake)
		...
	}

: The problem is, Ingredients hit a webserver every time. We don't want to do that in our test
: It's slow, we depned on the network

* Interfaces:

We can build an interface satisfied by CakeClient

	type Ingredienter interface {
		Ingredients(cake string) ([]string, err)
	}

And have our function accept an interface

	func OrderIngredients(cake string, i Ingredienter) ([]string, error)  {
		...
		ingredients, err := i.Ingredients(cake)
		...
	}

: What have we done here? We tailored our interface against the type

* Interfaces:

	type MockIngredienter struct {
		IngredientsMock func(cake string) ([]string, err)
	}

	func (m MockIngredienter) Ingredients(cake string) ([]string, err) {
		return m.IngredientsMock(cake)
	}

* Interfaces:

	func TestOrder(t *testing.T) {
		res := []string{"Flour", "Eggs", "Chocolate"}

		m := MockIngredienter{
			func(cake string) ([]string, err){
				return res, nil
			}
		}

		ingredients, err := OrderIngredients("tiramisu", m)
		if err != nil {
			t.Errorf(`error with OrderIngredients("tiramisu", m)`)
		}
		...
	}

: To sum up, we had a type, we implemented an interface satisfied by it, we used it and we mocked it.

* Package level functions

What if Ingredients was a plain function of the package?

	func Ingredients(cake string) ([]string, err) {

	}

Here is how to mock it

	var retrieveIngredients = testingwithgo.Ingredients

	func OrderIngredients(cake string) ([]string, err) {
		// testingwithgo.Ingredients(cake)
		retrieveIngredients(cake)
	}

* Package level functions (2)

	func TestOrderFunc(t *testing.T) {
		res := []string{"Flour", "Eggs", "Chocolate"}
		retrieveIngredients = func(cake string) ([]string, err) {
			return res, nil
		}
		defer retrieveIngredients = testingwithgo.Ingredients
		err := OrderIngredients("tiramisu")
	}

* Good traits of test code

- (more) explicit than application code
- more verbose (long test function names)
- DO REPEAT YOURSELF

	func BadTestOrder(t *testing.T) {
		m := getMockIngredienter()
		res, err := OrderIngredients("tiramisu", m)
		if err != nil {
			t.Errorf(`error with OrderIngredients("tiramisu", m)`)
		}
		if resDifferentFromMockRes(res) {
			t.Errorf(`result is different`)
		}
	}

* Good traits of test code	

	func TestCorrectIngredientsForTiramisu(t *testing.T) {
		mockResult := []string{"Flour", "Eggs", "Chocolate"}

		m := MockIngredienter{
			func(cake string) ([]string, err){
				return mockResult, nil
			}
		}

		res, err := OrderIngredients("tiramisu", m)

		if err != nil {
			t.Errorf(`error with OrderIngredients("tiramisu", m)`)
		}
		if len(mockResult) != len(res) {
			t.Errorf(`wrong result number, expecting %d, got %d`, len(mockResult), len(res))
		}
		for i, elem := range res {
			if elem != mockResult[i] {
				t.Errorf(` elem != mockResult[i], %s %s %d`, elem, mockResult[i], i)
			}
		}
	}

: good test code is obvious
: chi viene dopo deve capire immediatamente e senza navigare a destra e sinistra cosa 
: stiamo testando. Se parte della logica e` demandata a funzioni, si perde il controllo. Idealmente deve software
: nello schermo


* Pro tips

* Table tests

Each variant of the input and the output is stored in a map (table)
.code httptest/fibonaccitest.go

: Table Driven Tests: Ogni entry della tabella è un test case completo con input ed output atteso.
: Approccio promosso dall'ecosistema go e spesso si trova nella standard library di Go 
: Usa TDT anche se ti viene in mente un solo test case, nel caso si presentino bugs puoi facilmente
: aggiungere successivamente quei test case che falliscono

* Table tests

- Easy to add new test cases, just add new entry in the struct
: composite literals e le strutture anonime, permettono di scrivere i test in modo compatto
- Protip: give a name to the table entry 
- With functions, useful with mockery to instruct the mock beahviour (eg: return with error)

* Table tests   
	
	func Test...(t *testing.T) {
		testCases := []struct{
			name string, a, b, expected int, mock MyMock
		}{
			{
			 name: "caseOK", 
			 a: 0, b: 0, expected: 0, 
			 mock: func()MyMock{ ... instantiate mock beahviour...}()
			 },
			{
			name: "caseERR",  
			a: -1, b: 1, expected: 0,
			mock: func()MyMock{ ... instantiate mock beahviour...}()
			},
		}
		for _, tc := range testCases {
			obj := &MyObject{InjectedObj: tc.mock}
			got := obj.FuncToTest(tc.a, tc.b)
			if (tc.expected != got ) {
			    t.Errorf("%s fail expected: %d got: %d", tc.name, tc.expecte, got)
			}
		}
	}

* Test Fixtures

	func MyawesomeTest(t *testing.T) {
		data:= filepath.Join("testdata", "my-awesome-fixtures.json")
		// do somenthing  with data
	}

- go test sets pwd as package directory 
- use simply relative path in tests eg: "testdata"
- very useful for loading config, model data, binary data, etc 
- go tool will ignore any directory matching the word testdata

* Use flags in tests

- to run only slow tests
- to run integration tests 
	
	go test -tag=integration 

	// in *_integration_test.go
	// +build integration 
	func YourIntegrationTest(t *testing.T) {
		...	
	}

- to force golden files update

: *_integration_test.go con il tag di build //+build integration e lanciando con
: go test -tag=integration 
* Short mode 
	go test -short ./...
- Tell long-running tests to shorten their run time
- Used to avoid integration/e2e tests for example (dockertests)

	//my long test running
	func TestTimeConsuming(t *testing.T) {
		if testing.Short() {
	    	t.Skip("skipping test in short mode.")
		}
		...
	}

: More on golden files later

* Golden file tests

- use a flag to force the output of a function to a file
- verify the output of your code against the file
- testdata ignored by go

	var update = flag.Bool("update", false, "update .golden files")

	func TestToJSON(t *testing.T) {
		b	:= bytes.Buffer{}
		obj := MyObject{....}
		
		ToJSON(obj, &b)
		
		gp := filepath.Join("testdata", t.Name()+".golden")
		if *update {
			ioutil.WriteFile(gp, b.Bytes(), 0644)
		}
		g := ioutil.ReadFile(gp)
		if !bytes.Equal(b.Bytes(), g) {
			t.Errorf("writtein json does not match .golden file")
		}
	}
: Approccio molto utilizzato nella standard library ad esempio nel package fmt 
: di fatto è un output atteso storato in un file separato invece che nel codice stesso
: molto utile quando si hanno strutture dati molto grandi 
 
* Testify
- github.com/stretchr/testify
- Very large collection of assertions
- Mocking
- Test Suite
: asserzioni di equals su files su httpbody, sul panic di una funzione
: approccio alla 'java'
: creazioni di mock 
: ogni funzione di assert prende l'oggetto testing.T. Se c'è un errore viene visualizzato tramite go test
: permette di creare delle suite di tests
* Testify: assert

	func TestSomething(t *testing.T) {
		assert.Equal(t, 123, 123, "they should be equal")
		
		assert.NotEqual(t, 123, 456, "they should not be equal")
		
		assert.Nil(t, object)
		
		if assert.NotNil(t, object) {
		   assert.Equal(t, "Something", object.Value)
		}
	}

* Testify: mock
	type MyMockedObject struct{	
		mock.Mock
	}

	//mocked method
	func (m *MyMockedObject) DoSomething(number int) (bool, error) {
		args := m.Called(number)
		return args.Bool(0), args.Error(1)
	}

	func TestSomething(t *testing.T) {
		testObj := new(MyMockedObject)
		
		testObj.On("DoSomething", 123).Return(true, nil)
		
		targetFuncThatDoesSomethingWithObj(testObj)
		
		testObj.AssertExpectations(t)
	}
: con l'embedding della struct mock.Mock ereditiamo tutti i metodi della struct
: istruiamo la funzione da mockare in modo che registri la chiamata con il valore e ritorni
: i valori giusti

* Mockery
- https://github.com/vektra/mockery
- generate code from interfaces
    mockery -name MyDao -inpkg .
- similar to Java's Mockito 

    mock.On("MethodName", args...).Return(...)
- quantifiers `Once()`, `None()`, `Times(n)`

* Do we always need mocks?

* Afero
- A FileSystem Abstraction System for Go
- Useful to replicate a filesystem.  
- In memory or chrooted(~similar) filesystems (and many others...)
- Useful for setup and tear down an isolated environment every time. 
- Write testable code. Use an FS abstraction not `os` package directly.
: E' necessario scrivere il codice di business iniettando  un'astrazione del file system
: dato che in golang le funzionalita di accesso al filesystem sono chiamate 
: staticamente os.OpenFile()



* Networking
- Test the real connection, don't mock connections.
- Any protocol
- Setup a real server and test your handlers without mocks.
	func TestConn(t *testing.T) (client, conn net.Conn) {
		t.Helper()
		ln, err := net.Listen(“tcp”, “127.0.0.1:0”)
		var conn net.Conn
		go func() {
			defer ln.Close()
			conn, err = ln.Accept()
			//...
			}()
		client, err := net.Dial(“tcp”, ln.Addr().String())
		return client, conn
	}

: t.Helper tagga questa funzione come helper nell'environment di test 
: testa una sola connessione, facile introdurne N.

* Testing HTTP 
- *net/http/httptest* `serveHTTP` helper 
- test HTTP handlers as functions
.code httptest/httptest.go /START OMIT/,/END OMIT/
: Si crea una richiesta da passare all'hanlder  We don't have any query parameters for now, so we'll
: pass 'nil' as the third parameter.
: Si crea un  ResponseRecorder (che soddisfa l'interfaccia http.ResponseWriter) per registrare la risposta.
: il tipo HandlerFunc tramite la funzion ServeHTTP permette di chiamare 
: l'HTTP handlers come se fosse una normale chiamata a funzione passando la Request e il ResponseRecorder.
: sul ResponseRecorder controlliamo il body e lo status della risposta.


* Testing with docker
- Integration and End2End testing
- Instrumenting docker containers in tests (setup and teardown)
- Testing real beahviour with third parts interaction
- MySql, Oracle,  Mongo, Redis and every available docker image
- `https://github.com/ory/dockertest` 


* Example
.code httptest/testingwithdocker.go /START OMIT/,/END OMIT/
: TestMain runs in the main goroutine and can do whatever 
: setup and teardown is necessary around a call to m.Run()
: 1. newPool returns a new connection to the docker API.
: 2. pulls an image, creates a container based on it and runs it. 
: 3. exponential backoff-retry, because the application in the container
:    not be ready to accept connection
: 4. You can't defer this because os.Exit doesn't care for defer  




* Resources

From 0 to tester:

- [[https://www.amazon.it/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052][Working Effectively With Legacy Code ]] - M. Feathers
- [[https://golang.org/pkg/testing/][golang.org/pkg/testing/]] - The Go standard library 
- [[https://www.youtube.com/watch?v=8hQG7QlcLBk][Advanced testing in Go talk]] - Mitchell Hashimito 

Libraries: 

- the go standard library
- github.com/ory/dockertest
- github.com/stretchr/testify
- github.com/vektra/mockery

* We are hiring
